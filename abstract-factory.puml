@startuml abstract-factory

class Client #line.bold:royalBlue
hide Client members
hide Client circle

namespace abstract-factory {
    interface iAbstractProduct  {
        - setBehaviour(behaviour string) 
        - getBehaviour() string
        ..
        - setFeature(feature int) 
        - getFeature() int

    }
    interface iAbstractFactory  {
        - makeProduct() iAbstractProduct

    }
    class concreteProduct << (S,Aquamarine) >> {
        - behaviour string
        - feature int
        --
        - setBehaviour(behaviour string) 
        - getBehaviour() string
        ..
        - setFeature(feature int) 
        - getFeature() int

    }
    class concreteFactory << (S,Aquamarine) >> {
        - specialAttribute string

        - makeProduct() iAbstractProduct
    }
}

"Client" -[dotted,thickness=2,#royalBlue]-> "abstract-factory.iAbstractFactory"
"Client" -[dotted,thickness=2,#royalBlue]-> "abstract-factory.iAbstractProduct"

"abstract-factory.iAbstractFactory" <|-- "abstract-factory.concreteFactory"
"abstract-factory.iAbstractProduct" <|-- "abstract-factory.concreteProduct"

note as N1
    <b><color:royalBlue>Abstract Factory</color></b>

    <b>Type:</b> Creational

    Provides an interface for creating
    families of related or dependent
    objects without specifying their
    concrete class.
end note

note right of abstract-factory.iAbstractFactory::iAbstractProduct
    An abstract factory
    returns an abstract
    pointer to a concrete 
    object.
end note

@enduml
