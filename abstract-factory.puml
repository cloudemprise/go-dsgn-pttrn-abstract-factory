@startuml abstract-factory

class Client #line.bold:royalBlue
hide Client members
hide Client circle

namespace abstract-factory {
    class concreteFactory << (S,Aquamarine) >> {
        - attribute string

        - makeProduct() iAbstractProduct

    }
    class concreteProduct << (S,Aquamarine) >> {
        - attribute string
        - size int
        --
        - setAttribute(attribute string) 
        - getAttribute() string
        ..
        - setSize(size int) 
        - getSize() int
    }
    interface iAbstractFactory  {
        - makeProduct() iAbstractProduct

    }
    interface iAbstractProduct  {
        - setAttribute(attribute string) 
        - getAttribute() string
        ..
        - setSize(size int) 
        - getSize() int
    }
}

"Client" -[dotted,thickness=2,#royalBlue]-> "abstract-factory.iAbstractFactory"
"Client" -[dotted,thickness=2,#royalBlue]-> "abstract-factory.iAbstractProduct"

"abstract-factory.iAbstractFactory" <|-- "abstract-factory.concreteFactory"
"abstract-factory.iAbstractProduct" <|-- "abstract-factory.concreteProduct"

note as N1
    <b><color:royalBlue>Abstract Factory</color></b>

    <b>Type:</b> Creational

    Provides an interface for creating
    families of related or dependent
    objects without specifying their
    concrete class.
end note

@enduml
