@startuml go-dsgn-pttrn-abstract-factory

namespace abstract-factory {
    class concreteFactory1 << (S,Aquamarine) >> {
        + makeProductA() iAbstractProductA
        + makeProductB() iAbstractProductB

    }
    class concreteFactory2 << (S,Aquamarine) >> {
        + makeProductA() iAbstractProductA
        + makeProductB() iAbstractProductB

    }
    class concreteProductA << (S,Aquamarine) >> {
        - behaviourA string
        - featureA int

        + setBehaviourA(behaviour string) 
        + getBehaviourA() string
        + setFeatureA(feature int) 
        + getFeatureA() int

    }
    class concreteProductB << (S,Aquamarine) >> {
        - behaviourB string
        - featureB int

        + setBehaviourB(behaviour string) 
        + getBehaviourB() string
        + setFeatureB(feature int) 
        + getFeatureB() int

    }
    interface iAbstractFactory  {
        + makeProductA() iAbstractProductA
        + makeProductB() iAbstractProductB

    }
    interface iAbstractProductA  {
        + setBehaviourA(behaviour string) 
        + getBehaviourA() string
        + setFeatureA(feature int) 
        + getFeatureA() int

    }
    interface iAbstractProductB  {
        + setBehaviourB(behaviour string) 
        + getBehaviourB() string
        + setFeatureB(feature int) 
        + getFeatureB() int

    }

    class client {

        + createFactory(...) iAbstractFactory
    }

}

"abstract-factory.client" --> "abstract-factory.iAbstractFactory"

"abstract-factory.iAbstractFactory" <|.. "abstract-factory.concreteFactory1"
"abstract-factory.iAbstractFactory" <|.. "abstract-factory.concreteFactory2"

"abstract-factory.concreteFactory1" --> "abstract-factory.iAbstractProductA"
"abstract-factory.concreteFactory1" --> "abstract-factory.iAbstractProductB"
"abstract-factory.concreteFactory2" --> "abstract-factory.iAbstractProductA"
"abstract-factory.concreteFactory2" --> "abstract-factory.iAbstractProductB"

"abstract-factory.iAbstractProductA" <|.. "abstract-factory.concreteProductA"
"abstract-factory.iAbstractProductB" <|.. "abstract-factory.concreteProductB"

@enduml
